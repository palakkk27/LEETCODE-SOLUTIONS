class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // Base condition...
        // If it's a null matrix, return false....
        if(matrix==null || matrix.length==0 || matrix[0].length==0) 
            return false;
        int row = matrix.length;        // Number of Rows of the matrix...
        int col = matrix[0].length;     // Number of Columns of the matrix...
        // Initialize beg index of the considered 1D matrix (i.e: 0)...
        int beg = 0;
        // Set end index of the considered 1D matrix (i.e:(row*col)-1)...
        int end = row * col - 1;
        // Now apply binary search & Run a while loop...
        while(beg <= end ){
            // Get the middle index as (beg + end) / 2...
            int mid = beg + (end - beg)/2;
            // Set the element at middle index using matrix[mid / col][mid % col]...
            int idx = matrix[mid / col][mid % col];
            // If the element present at the middle index is equal to the target integer, return true...
            if(idx == target)
                return true;
            // If the middle index is greater than the target, update the end index to mid - 1...
            if(idx > target){
                end = mid-1;
            }
            // If the middle index element is lesser than the target, update the low index to middle+1...
            else{
                beg = mid + 1;
            }
        }
        return false;       // As we didn't get the target, we can directly return false...
    }
}
